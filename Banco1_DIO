{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyO/0et+hCPBamGD23CMKpw6"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "FxOvSRyHs6R6"
      },
      "outputs": [],
      "source": [
        "import json\n",
        "from decimal import Decimal, InvalidOperation\n",
        "import os\n",
        "\n",
        "# Constantes\n",
        "LIMITE_SAQUES = 3\n",
        "LIMITE_VALOR_SAQUE = 500\n",
        "\n",
        "# Carregar dados salvos (se existirem)\n",
        "def carregar_dados():\n",
        "    try:\n",
        "        if os.path.exists(\"dados.json\") and os.path.getsize(\"dados.json\") > 0:\n",
        "            with open(\"dados.json\", \"r\") as f:\n",
        "                dados = json.load(f)\n",
        "                # Convert saldo back to Decimal after loading\n",
        "                dados[\"saldo\"] = Decimal(dados[\"saldo\"])\n",
        "                return dados\n",
        "        else:\n",
        "            return {\"saldo\": Decimal(0), \"extrato\": [], \"saques_hoje\": 0}\n",
        "    except (FileNotFoundError, json.JSONDecodeError) as e:\n",
        "        print(f\"Erro ao carregar dados: {e}\")\n",
        "        print(\"Inicializando dados padrão.\")\n",
        "        return {\"saldo\": Decimal(0), \"extrato\": [], \"saques_hoje\": 0}\n",
        "\n",
        "# Salvar dados\n",
        "def salvar_dados(saldo, extrato, saques_hoje):\n",
        "    # Convert Decimal saldo to string before saving\n",
        "    dados = {\"saldo\": str(saldo), \"extrato\": extrato, \"saques_hoje\": saques_hoje}\n",
        "    with open(\"dados.json\", \"w\") as f:\n",
        "        json.dump(dados, f)\n",
        "\n",
        "# Funções de operações\n",
        "def depositar(saldo, extrato):\n",
        "    try:\n",
        "        valor_str = input(\"Valor do depósito: R$ \").replace(',', '.')\n",
        "        valor = Decimal(valor_str)\n",
        "        if valor <= 0:\n",
        "            print(\"Valor deve ser positivo!\")\n",
        "            return saldo, extrato\n",
        "        saldo += valor\n",
        "        extrato.append(f\"Depósito: R$ {valor:.2f}\")\n",
        "        print(\"Depósito realizado!\")\n",
        "        return saldo, extrato\n",
        "    except (ValueError, InvalidOperation):\n",
        "        print(\"Erro: Valor inválido!\")\n",
        "        return saldo, extrato\n",
        "\n",
        "def sacar(saldo, extrato, saques_hoje):\n",
        "    try:\n",
        "        valor_str = input(\"Valor do saque: R$ \").replace(',', '.')\n",
        "        valor = Decimal(valor_str)\n",
        "        if valor <= 0:\n",
        "            print(\"Valor deve ser positivo!\")\n",
        "            return saldo, extrato, saques_hoje\n",
        "        if saques_hoje >= LIMITE_SAQUES:\n",
        "            print(\"Limite de saques diários excedido!\")\n",
        "            return saldo, extrato, saques_hoje\n",
        "        if valor > LIMITE_VALOR_SAQUE:\n",
        "            print(f\"Limite por saque: R$ {LIMITE_VALOR_SAQUE:.2f}\")\n",
        "            return saldo, extrato, saques_hoje\n",
        "        if valor > saldo:\n",
        "            print(\"Saldo insuficiente!\")\n",
        "            return saldo, extrato, saques_hoje\n",
        "        saldo -= valor\n",
        "        extrato.append(f\"Saque: R$ {valor:.2f}\")\n",
        "        saques_hoje += 1\n",
        "        print(\"Saque realizado!\")\n",
        "        return saldo, extrato, saques_hoje\n",
        "    except (ValueError, InvalidOperation):\n",
        "        print(\"Erro: Valor inválido!\")\n",
        "        return saldo, extrato, saques_hoje\n",
        "\n",
        "def exibir_extrato(saldo, extrato):\n",
        "    print(\"\\n=============== EXTRATO ===============\")\n",
        "    if not extrato:\n",
        "        print(\"Nenhuma movimentação.\")\n",
        "    else:\n",
        "        for movimento in extrato:\n",
        "            print(movimento)\n",
        "    print(f\"\\nSaldo: R$ {saldo:.2f}\")\n",
        "    print(\"=======================================\")\n",
        "\n",
        "# Menu interativo\n",
        "def main():\n",
        "    dados = carregar_dados()\n",
        "    saldo, extrato, saques_hoje = dados[\"saldo\"], dados[\"extrato\"], dados[\"saques_hoje\"]\n",
        "\n",
        "    while True:\n",
        "        opcao = input(\"\"\"\n",
        "[d] Depositar\n",
        "[s] Sacar\n",
        "[e] Extrato\n",
        "[q] Sair\n",
        "=> \"\"\").strip().lower()\n",
        "\n",
        "        if opcao == \"d\":\n",
        "            saldo, extrato = depositar(saldo, extrato)\n",
        "        elif opcao == \"s\":\n",
        "            saldo, extrato, saques_hoje = sacar(saldo, extrato, saques_hoje)\n",
        "        elif opcao == \"e\":\n",
        "            exibir_extrato(saldo, extrato)\n",
        "        elif opcao == \"q\":\n",
        "            salvar_dados(saldo, extrato, saques_hoje)\n",
        "            print(\"Saindo... Dados salvos!\")\n",
        "            break\n",
        "        else:\n",
        "            print(\"Opção inválida!\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1ba249a5"
      },
      "source": [
        "import os\n",
        "\n",
        "# Remove the corrupted dados.json file if it exists\n",
        "if os.path.exists(\"dados.json\"):\n",
        "    os.remove(\"dados.json\")\n",
        "    print(\"Removed corrupted dados.json file.\")"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}